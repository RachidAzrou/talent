import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useToast } from "@/hooks/use-toast";
import { 
  FilePlus, 
  Save, 
  Upload, 
  FileText,
  Image as ImageIcon, 
  Info,
  Palette,
  Sliders,
  Trash
} from "lucide-react";

import { Button } from "@/components/ui/button";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import { 
  Form, 
  FormControl, 
  FormDescription, 
  FormField, 
  FormItem, 
  FormLabel, 
  FormMessage 
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { 
  Tabs, 
  TabsContent, 
  TabsList, 
  TabsTrigger 
} from "@/components/ui/tabs";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import { 
  PDFView, 
  ModernProfessionalTemplate
} from "@/components/pdf/CandidateTemplate";

// Form schema for CV template settings
const cvTemplateSchema = z.object({
  templateStyle: z.enum(["modernProfessional"]).default("modernProfessional"),
  companyName: z.string().min(1, "Company name is required"),
  companyLogo: z.string().optional(),
  headerColor: z.string().default("#73b729"),
  accentColor: z.string().default("#2c3242"),
  fontFamily: z.string().default("Inter"),
  contactEmail: z.string().email("Invalid email address").optional(),
  contactPhone: z.string().optional(),
  contactWebsite: z.string().optional(),
  footerText: z.string().optional(),
  customSections: z.array(
    z.object({
      title: z.string(),
      enabled: z.boolean().default(true)
    })
  ).default([
    { title: "Profile", enabled: true },
    { title: "Skills", enabled: true },
    { title: "Experience", enabled: true },
    { title: "Education", enabled: true },
    { title: "Certifications", enabled: true },
    { title: "Languages", enabled: true }
  ])
});

// Sample candidate data for preview
const sampleCandidate = {
  firstName: "John",
  lastName: "Doe",
  email: "john.doe@example.com",
  phone: "+32 (04) 93 40 11 23",
  location: "Brussels, Belgium",
  currentPosition: "Senior Developer",
  linkedinUrl: "linkedin.com/in/johndoe",
  summary: "Experienced developer with over 8 years of expertise in web development and software engineering. Passionate about creating efficient, scalable, and user-friendly applications.",
  skills: ["JavaScript", "TypeScript", "React", "Node.js", "SQL", "GraphQL"],
  experience: [
    {
      title: "Senior Developer",
      company: "Tech Solutions",
      location: "Brussels",
      startDate: "2019",
      endDate: "Present",
      description: ["Led development team of 5 engineers", "Implemented CI/CD pipelines", "Reduced application load time by 40%"]
    },
    {
      title: "Web Developer",
      company: "Digital Agency",
      location: "Antwerp",
      startDate: "2015",
      endDate: "2019",
      description: ["Developed responsive web applications", "Worked with React and Node.js", "Collaborated with design team"]
    }
  ],
  education: [
    {
      degree: "Master of Computer Science",
      institution: "University of Brussels",
      location: "Brussels",
      graduationDate: "2015"
    },
    {
      degree: "Bachelor of Computer Science",
      institution: "University of Antwerp",
      location: "Antwerp",
      graduationDate: "2013"
    }
  ]
};

export default function CVTemplate() {
  const { toast } = useToast();
  const [previewData, setPreviewData] = useState(sampleCandidate);
  
  // Load saved template settings from localStorage or use defaults
  const getDefaultValues = () => {
    const savedSettings = localStorage.getItem("cvTemplateSettings");
    if (savedSettings) {
      try {
        return JSON.parse(savedSettings);
      } catch (e) {
        console.error("Failed to parse saved settings:", e);
      }
    }
    
    // Default values
    return {
      templateStyle: "modernProfessional",
      companyName: "Tecnarit",
      companyLogo: "/attached_assets/logo.png",
      headerColor: "#73b729",
      accentColor: "#2c3242",
      fontFamily: "Inter",
      contactEmail: "info@tecnarit.com",
      contactPhone: "+32 123 456 789",
      contactWebsite: "www.tecnarit.com",
      footerText: "© Tecnarit. Candidate profile generated by Tecnarit Recruitment System",
      customSections: [
        { title: "Profile", enabled: true },
        { title: "Skills", enabled: true },
        { title: "Experience", enabled: true },
        { title: "Education", enabled: true },
        { title: "Certifications", enabled: true },
        { title: "Languages", enabled: true }
      ]
    };
  };

  const form = useForm<z.infer<typeof cvTemplateSchema>>({
    resolver: zodResolver(cvTemplateSchema),
    defaultValues: getDefaultValues()
  });

  // Handle form submission
  const onSubmit = async (values: z.infer<typeof cvTemplateSchema>) => {
    try {
      // Bewaar lokaal voor snelle toegang (als fallback)
      localStorage.setItem("cvTemplateSettings", JSON.stringify(values));
      localStorage.setItem("selectedTemplateStyle", values.templateStyle);
      
      // Verzend template-instellingen naar server
      const response = await fetch('/api/templates/settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify(values)
      });
      
      if (!response.ok) {
        throw new Error('Failed to save template settings');
      }
      
      // Update preview met nieuwe instellingen
      setPreviewData({
        ...sampleCandidate
      });
      
      // Template naam voor toast melding
      const templateName = 
        values.templateStyle === "modernProfessional" ? "Modern Professional" :
        values.templateStyle === "executiveStyle" ? "Executive Style" : 
        "Creative Professional";
      
      toast({
        title: "CV Template opgeslagen",
        description: `Je template-instellingen zijn succesvol opgeslagen met de ${templateName} template stijl.`,
      });
    } catch (error) {
      console.error('Error saving template settings:', error);
      
      // Fallback naar localStorage als server opslag mislukt
      toast({
        title: "Template opgeslagen (lokaal)",
        description: "De template-instellingen konden niet op de server worden opgeslagen, maar zijn wel lokaal bewaard.",
        variant: "destructive"
      });
    }
  };

  // Handle logo upload
  const handleLogoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Check if file size is under 5MB
      if (file.size > 5 * 1024 * 1024) {
        toast({
          title: "Bestand te groot",
          description: "Selecteer een afbeelding kleiner dan 5MB.",
          variant: "destructive"
        });
        return;
      }
      
      try {
        // Maak FormData object om het bestand te uploaden
        const formData = new FormData();
        formData.append('logo', file);
        
        // Upload het bestand naar de server
        const response = await fetch('/api/upload/logo', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          },
          body: formData
        });
        
        if (!response.ok) {
          throw new Error('Failed to upload logo');
        }
        
        const result = await response.json();
        
        // Sla de URL op van het geüploade bestand
        form.setValue("companyLogo", result.fileUrl);
        toast({
          title: "Logo geüpload",
          description: "Het logo is succesvol geüpload en opgeslagen.",
        });
      } catch (error) {
        console.error('Error uploading logo:', error);
        toast({
          title: "Upload mislukt",
          description: "Er is een fout opgetreden bij het uploaden van het logo.",
          variant: "destructive"
        });
      }
    }
  };

  return (
    <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8">
      <div className="flex flex-col space-y-2 mb-8">
        <div className="flex items-center gap-3">
          <div className="h-8 w-1 bg-gradient-to-b from-[#73b729] to-green-400 rounded-full"></div>
          <p className="text-2xl font-semibold text-gray-800">
            <span className="inline-block mr-2">CV</span>
            <span className="inline-block">Template</span>
          </p>
        </div>
        <p className="mt-1 text-sm text-gray-500 pl-4">
          Customize the template used for candidate CV generation
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Form section */}
        <div>
          <Card className="border-gray-200 shadow-sm overflow-hidden">
            <CardHeader className="bg-gradient-to-r from-[#73b729]/10 to-white border-b pb-4">
              <CardTitle className="text-[#2c3242] flex items-center">
                <FilePlus className="mr-2 h-5 w-5 text-[#73b729]" />
                Template Settings
              </CardTitle>
              <CardDescription>
                Customize how candidate CVs will look when generated
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-6">
              <Tabs defaultValue="branding">
                <TabsList className="mb-4 bg-gray-100/80 p-1 rounded-xl w-full grid grid-cols-3">
                  <TabsTrigger value="branding" className="flex items-center gap-2">
                    <Palette className="h-4 w-4" />
                    <span>Branding</span>
                  </TabsTrigger>
                  <TabsTrigger value="content" className="flex items-center gap-2">
                    <FileText className="h-4 w-4" />
                    <span>Content</span>
                  </TabsTrigger>
                  <TabsTrigger value="appearance" className="flex items-center gap-2">
                    <Sliders className="h-4 w-4" />
                    <span>Appearance</span>
                  </TabsTrigger>
                </TabsList>

                <Form {...form}>
                  <form onSubmit={form.handleSubmit(onSubmit)}>
                    <TabsContent value="branding" className="space-y-4">
                      <div className="p-4 bg-blue-50 rounded-lg mb-4 border border-blue-100">
                        <div className="flex items-start">
                          <Info className="h-5 w-5 text-blue-500 mr-2 mt-0.5" />
                          <p className="text-sm text-blue-700">
                            Your branding settings will be applied to all generated CVs. Upload your company logo and select your brand colors for a consistent look.
                          </p>
                        </div>
                      </div>
                    
                      <FormField
                        control={form.control}
                        name="companyName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-base font-medium flex items-center">
                              <FileText className="h-4 w-4 text-[#73b729] mr-2" />
                              Company Name
                            </FormLabel>
                            <FormControl>
                              <Input 
                                placeholder="Your company name" 
                                className="focus-visible:ring-[#73b729]" 
                                {...field} 
                              />
                            </FormControl>
                            <FormDescription>
                              The name that will appear on all generated CVs
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <div className="border-t border-gray-100 my-5 pt-5">
                        <h3 className="text-sm font-medium mb-3 text-gray-600 flex items-center">
                          <ImageIcon className="h-4 w-4 text-[#73b729] mr-2" />
                          Logo Settings
                        </h3>
                      </div>
                      
                      <FormItem>
                        <FormLabel className="text-base font-medium">Company Logo</FormLabel>
                        <div className="p-1 bg-gray-50 rounded-lg border border-gray-200">
                          <div className="flex flex-col md:flex-row items-center gap-6 p-4">
                            <div className="border rounded-lg p-4 h-32 w-full md:w-1/2 flex items-center justify-center bg-white">
                              {form.watch("companyLogo") ? (
                                <img 
                                  src={form.watch("companyLogo")} 
                                  alt="Company Logo" 
                                  className="max-h-24 max-w-full object-contain"
                                />
                              ) : (
                                <div className="text-gray-400 flex flex-col items-center">
                                  <ImageIcon className="h-10 w-10 mb-2 text-gray-300" />
                                  <span className="text-sm font-medium">No logo selected</span>
                                  <span className="text-xs text-gray-400 mt-1">Upload your company logo</span>
                                </div>
                              )}
                            </div>
                            <div className="flex flex-col gap-4 w-full md:w-1/2">
                              <div className="text-sm text-gray-600">
                                <p>Your logo will appear in the header of all generated CVs.</p>
                                <p className="mt-1">For best results, use a PNG with transparent background.</p>
                              </div>
                              <div className="flex flex-wrap gap-2">
                                <Input
                                  type="file"
                                  accept="image/*"
                                  id="logo-upload"
                                  onChange={handleLogoUpload}
                                  className="hidden"
                                />
                                <Button
                                  type="button"
                                  variant="outline"
                                  onClick={() => document.getElementById("logo-upload")?.click()}
                                  className="bg-white hover:bg-gray-50 border-[#73b729]/40 hover:border-[#73b729] text-[#2c3242]"
                                >
                                  <Upload className="h-4 w-4 mr-2 text-[#73b729]" />
                                  Choose Image
                                </Button>
                                {form.watch("companyLogo") && (
                                  <Button
                                    type="button"
                                    variant="outline"
                                    className="bg-white border-red-200 hover:border-red-300 text-red-500 hover:text-red-600"
                                    onClick={() => form.setValue("companyLogo", "")}
                                  >
                                    <Trash className="h-4 w-4 mr-2" />
                                    Remove
                                  </Button>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                        <FormDescription>
                          Recommended size: 400×100px, max 1MB
                        </FormDescription>
                      </FormItem>
                      
                      <div className="border-t border-gray-100 my-5 pt-5">
                        <h3 className="text-sm font-medium mb-3 text-gray-600 flex items-center">
                          <Palette className="h-4 w-4 text-[#73b729] mr-2" />
                          Color Settings
                        </h3>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <FormField
                          control={form.control}
                          name="headerColor"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-base font-medium">Header Color</FormLabel>
                              <div className="flex gap-3 items-center">
                                <div 
                                  className="w-12 h-12 rounded-md border shadow-sm overflow-hidden" 
                                  style={{ background: field.value }}
                                />
                                <div className="flex-1">
                                  <div className="flex items-center gap-2">
                                    <FormControl>
                                      <Input 
                                        type="text" 
                                        className="font-mono text-sm focus-visible:ring-[#73b729]" 
                                        {...field} 
                                      />
                                    </FormControl>
                                    <FormControl>
                                      <div className="relative">
                                        <Input
                                          type="color"
                                          className="w-10 h-10 p-1 absolute opacity-0 cursor-pointer"
                                          {...field}
                                          onChange={(e) => {
                                            field.onChange(e.target.value);
                                          }}
                                        />
                                        <Button 
                                          type="button" 
                                          variant="outline" 
                                          size="icon" 
                                          className="h-10 w-10"
                                        >
                                          <Palette className="h-4 w-4" />
                                        </Button>
                                      </div>
                                    </FormControl>
                                  </div>
                                  <FormDescription className="mt-1">
                                    Primary color used in CV headers
                                  </FormDescription>
                                </div>
                              </div>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="accentColor"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-base font-medium">Accent Color</FormLabel>
                              <div className="flex gap-3 items-center">
                                <div 
                                  className="w-12 h-12 rounded-md border shadow-sm overflow-hidden" 
                                  style={{ background: field.value }}
                                />
                                <div className="flex-1">
                                  <div className="flex items-center gap-2">
                                    <FormControl>
                                      <Input 
                                        type="text" 
                                        className="font-mono text-sm focus-visible:ring-[#73b729]" 
                                        {...field} 
                                      />
                                    </FormControl>
                                    <FormControl>
                                      <div className="relative">
                                        <Input
                                          type="color"
                                          className="w-10 h-10 p-1 absolute opacity-0 cursor-pointer"
                                          {...field}
                                          onChange={(e) => {
                                            field.onChange(e.target.value);
                                          }}
                                        />
                                        <Button 
                                          type="button" 
                                          variant="outline" 
                                          size="icon" 
                                          className="h-10 w-10"
                                        >
                                          <Palette className="h-4 w-4" />
                                        </Button>
                                      </div>
                                    </FormControl>
                                  </div>
                                  <FormDescription className="mt-1">
                                    Secondary color used for section titles
                                  </FormDescription>
                                </div>
                              </div>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                    </TabsContent>
                    
                    <TabsContent value="content" className="space-y-4">
                      <div className="p-4 bg-blue-50 rounded-lg mb-4 border border-blue-100">
                        <div className="flex items-start">
                          <Info className="h-5 w-5 text-blue-500 mr-2 mt-0.5" />
                          <p className="text-sm text-blue-700">
                            Customize the contact information and content that will appear on all generated CVs. This information will be displayed in the CV footer.
                          </p>
                        </div>
                      </div>
                      
                      <div className="border-t border-gray-100 my-5 pt-5">
                        <h3 className="text-sm font-medium mb-3 text-gray-600 flex items-center">
                          <FileText className="h-4 w-4 text-[#73b729] mr-2" />
                          Contact Information
                        </h3>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <FormField
                          control={form.control}
                          name="contactEmail"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-base font-medium">Contact Email</FormLabel>
                              <FormControl>
                                <Input 
                                  type="email" 
                                  placeholder="contact@example.com" 
                                  className="focus-visible:ring-[#73b729]"
                                  {...field} 
                                />
                              </FormControl>
                              <FormDescription>
                                Email address for candidate inquiries
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="contactPhone"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Contact Phone</FormLabel>
                              <FormControl>
                                <Input placeholder="+32 123 456 789" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      <FormField
                        control={form.control}
                        name="contactWebsite"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-base font-medium">Website</FormLabel>
                            <FormControl>
                              <Input 
                                placeholder="www.example.com" 
                                className="focus-visible:ring-[#73b729]"
                                {...field} 
                              />
                            </FormControl>
                            <FormDescription>
                              Your company website URL
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <div className="border-t border-gray-100 my-5 pt-5">
                        <h3 className="text-sm font-medium mb-3 text-gray-600 flex items-center">
                          <FileText className="h-4 w-4 text-[#73b729] mr-2" />
                          Footer Information
                        </h3>
                      </div>
                      
                      <FormField
                        control={form.control}
                        name="footerText"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-base font-medium">Footer Text</FormLabel>
                            <FormControl>
                              <Textarea 
                                placeholder="© 2025 Your Company. All rights reserved." 
                                className="resize-none focus-visible:ring-[#73b729] min-h-[80px]" 
                                rows={3}
                                {...field} 
                              />
                            </FormControl>
                            <FormDescription>
                              Text that appears in the footer of each CV, such as copyright information or disclaimers
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <Separator className="my-4" />
                      
                      <div>
                        <h3 className="text-sm font-medium mb-3 flex items-center">
                          Sections
                          <TooltipProvider>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <div className="ml-2 text-gray-400 cursor-help">
                                  <Info className="h-4 w-4" />
                                </div>
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="w-[240px] text-sm">
                                  Enable or disable sections that will appear in the generated CV
                                </p>
                              </TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                        </h3>
                        
                        <div className="bg-gray-50 p-4 rounded-md border">
                          {form.watch('customSections').map((section, index) => (
                            <div key={index} className="flex items-center justify-between py-2 border-b last:border-0">
                              <span className="text-sm font-medium">{section.title}</span>
                              <div className="flex items-center">
                                <input
                                  type="checkbox"
                                  id={`section-${index}`}
                                  checked={section.enabled}
                                  onChange={(e) => {
                                    const updatedSections = [...form.watch('customSections')];
                                    updatedSections[index].enabled = e.target.checked;
                                    form.setValue('customSections', updatedSections);
                                  }}
                                  className="h-4 w-4 text-[#73b729] focus:ring-[#73b729] border-gray-300 rounded"
                                />
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </TabsContent>
                    
                    <TabsContent value="appearance" className="space-y-6">
                      <div>
                        <h3 className="text-base font-medium mb-3 flex items-center">
                          Template Style
                          <TooltipProvider>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <Info className="h-4 w-4 ml-2 text-gray-400" />
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="w-60 text-xs text-gray-600">
                                  Choose between three professional template styles that best match your branding
                                </p>
                              </TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                        </h3>
                        
                        <FormField
                          control={form.control}
                          name="templateStyle"
                          render={({ field }) => (
                            <FormItem>
                              <div className="grid grid-cols-1 gap-4">
                                <div className="border-2 border-[#73b729] shadow-md rounded-md overflow-hidden">
                                  <div className="bg-[#2c3242] text-white p-2 text-center text-xs font-medium">
                                    Modern Professional
                                  </div>
                                  <div className="p-2">
                                    <div className="flex items-center justify-between mb-2">
                                      <div className="w-2/3 h-3 bg-gray-200 rounded"></div>
                                      <div className="w-6 h-6 rounded bg-[#73b729]"></div>
                                    </div>
                                    <div className="flex space-x-2">
                                      <div className="w-1/3 space-y-1.5">
                                        <div className="h-2 bg-gray-200 rounded"></div>
                                        <div className="h-2 bg-gray-200 rounded"></div>
                                        <div className="h-2 bg-gray-200 rounded w-2/3"></div>
                                      </div>
                                      <div className="w-2/3 space-y-1.5">
                                        <div className="h-2 bg-gray-200 rounded"></div>
                                        <div className="h-2 bg-gray-200 rounded"></div>
                                        <div className="h-2 bg-gray-200 rounded w-2/3"></div>
                                      </div>
                                    </div>
                                  </div>
                                </div>


                              </div>
                              
                              <div className="flex justify-center text-xs text-gray-500 mt-2">
                                <span>Clean & Professional</span>
                              </div>
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      <Separator className="my-4" />
                      
                      <FormField
                        control={form.control}
                        name="fontFamily"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Font Family</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select a font" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="Inter">Inter</SelectItem>
                                <SelectItem value="Arial">Arial</SelectItem>
                                <SelectItem value="Helvetica">Helvetica</SelectItem>
                                <SelectItem value="Times New Roman">Times New Roman</SelectItem>
                                <SelectItem value="Georgia">Georgia</SelectItem>
                                <SelectItem value="Verdana">Verdana</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </TabsContent>
                    
                    <div className="mt-6 flex items-center justify-end space-x-2">
                      <Button
                        type="submit"
                        className="bg-gradient-to-r from-[#73b729] to-green-500 hover:from-[#68a625] hover:to-green-600 text-white border-none"
                      >
                        <Save className="h-4 w-4 mr-2" />
                        Save Template
                      </Button>
                    </div>
                  </form>
                </Form>
              </Tabs>
            </CardContent>
          </Card>
        </div>
        
        {/* Preview section */}
        <div className="flex flex-col space-y-4">
          <Card className="border-gray-200 shadow-sm">
            <CardHeader className="bg-gray-50/50">
              <CardTitle className="text-[#2c3242] flex items-center">
                <FileText className="mr-2 h-5 w-5 text-[#73b729]" />
                Preview
              </CardTitle>
              <CardDescription>
                See how the CV will look with your current settings
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-6">
              <div className="bg-gray-50 border rounded-md p-2 shadow-inner">
                <div className="bg-white shadow-sm rounded overflow-hidden" style={{ height: '600px' }}>
                  <ModernProfessionalTemplate 
                    data={previewData}
                    companyLogo={form.watch("companyLogo") || "/attached_assets/logo.png"}
                    primaryColor={form.watch("headerColor")}
                    secondaryColor={form.watch("accentColor")}
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}